searchState.loadedDescShard("lc3sim_project", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTake in a <code>&amp;str</code>, returning a <code>Vec&lt;Token&gt;</code> that contains all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts and calls <code>Self::panic_from_u8</code>.\n<code>const</code> optimized u8 conversion.\nProduces all words in order from 0x0000.\nFull LC3 simulator.\nLC3 Memory Address.\nProduces all words in order from 0x0000, possibly skipping …\nSets the negative flag\nSets the positive flag\nSets the zero flag\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the machine to a halted state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the machine is set to halted.\nReturns true if the negative flag is set\nCurrent program counter\nFill the lines from <code>start</code> with <code>words</code>.\nReturns true if the positive flag is set\nReplace the current program counter\nClear a halted state, if any.\nReturns true if the zero flag is set\nSparse iterator for <code>CoreLC3</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCaptures all LC-3 <code>Instruction</code>s.\nRun this instruction on <code>P</code>, producing all outputs and side …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the word into this instruction, if possible.")