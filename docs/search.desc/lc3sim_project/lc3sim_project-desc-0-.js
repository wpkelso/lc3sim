searchState.loadedDescShard("lc3sim_project", 0, "Structs to progress [<code>LC3</code>] programs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTake in a <code>&amp;str</code>, returning a <code>Vec&lt;Token&gt;</code> that contains all …\nSize of the memory address space.\nFirst address of the device register address space.\nCharacters written to this low byte will be displayed on …\nBit 15 is 1 when the display is ready to receive a new …\nPriority for an I/O interrupt\nFirst address of the interrupt vector table.\nLast character typed on the keyboard.\nVector for a keyboard I/O interrupt.\nBit 15 is 1 when the keyboard has received a new character.\nBit 15 is clock enable – machine runs while set to 1.\nNumber of registers in the LC3 spec\nFirst address of the operating and supervisor stack space.\nRegister with a special stack meaning in privileged mode.\nInitial supervisor stack pointer value.\nFirst address of the trap vector table.\nFirst address of the user code space.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts and calls <code>Self::panic_from_u8</code>.\n<code>const</code> optimized u8 conversion.\nProduces all words in order from 0x0000.\nFull LC3 simulator.\nLC3 Memory Address.\nProduces all words in order from 0x0000, possibly skipping …\nFailure occured during a machine step.\nClears the sign flags.\nReturn the instruction at <code>Self::pc</code>, if any.\nSets the negative flag.\nSets the positive flag.\nSets the zero flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the machine to a halted state.\nInitiates the interrupt service routine for <code>vector</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the machine is set to halted.\nReturns true if the negative flag is set.\nCurrent program counter.\nFill the lines from <code>start</code> with <code>words</code>.\nPopulates the processor from a binary provider.\nReturns true if the positive flag is set.\nCurrent priority in [0, 7].\nTrue if in supervisor mode, false if in user mode.\nReturns the current processor status register value.\nReplace the current program counter.\nSets priority if in [0, 7].\nSets to supervisor mode if true; to user mode if false.\nRestores the processor status register value.\nProcesses the instruction at <code>Self::pc</code>.\nUnset the machine from a halted state, if set.\nReturns true if the zero flag is set.\nSparse iterator for <code>CoreLC3</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes the current instruction.\nAsynchronous <code>LC3</code> execution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDangerous and/or inefficient LC3 executors.\nSynchronous <code>LC3</code> execution.\nProgress an LC3 program asynchronously, taking control of …\nErrors on any I/O TRAP.\nTreats I/O as disconnected, causing infinite stalls on any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProgress an LC3 program synchronously, taking control of …\nLimited run of <code>processor&#39;s</code> program to completion on <code>harness</code>…\nRuns <code>processor&#39;s</code> program to completion on <code>harness</code>.\nCaptures all LC-3 <code>Instruction</code>s.\nRun this instruction on <code>P</code>, producing all outputs and side …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the word into this instruction, if possible.\nFormat all bits from <code>idx</code> byte of a LC3 word into a nice to …\nFormat bits from a single byte into a nice to read format.\nFormat bits from <code>idx</code> byte of a LC3 word into a nice to …")